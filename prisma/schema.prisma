// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Room {
  id        String     @id @default(uuid())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songs     Song[]
  users     User[]  
  roomHost  RoomHost  @relation(fields: [roomHostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roomHostId String @unique
}

model RoomHost {
  id        String     @id @default(uuid())
  user      User?
  room      Room?
  roomId    String?
}


model Song {
  id        String     @id @default(uuid())
  name      String
  artist    String
  imageUrl  String
  songUri   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId   String
  room     Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  account       Account?
  session       Session?
  room          Room?   @relation(fields: [roomId], references: [code], onDelete: NoAction, onUpdate: NoAction)
  roomId        String? 
  roomHost      RoomHost?   @relation(fields: [roomHostId], references: [id])
  roomHostId    String? @unique

  @@index([roomId])
  @@index([roomHostId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @unique
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}